{"version":3,"sources":["utils.js","infoWindow.js","google_maps.js","search_box.js","wikipedia_client.js","sidebar.js","App.js","serviceWorker.js","index.js"],"names":["loadGoogleMap","window","googleMapLoader","googleMapPromise","Promise","resolve","google","loadMapScript","maps_script","document","createElement","src","concat","async","defer","body","appendChild","InfoWindow","props","react_default","a","className","title","href","wikiUrl","thumbnail","source","alt","GoogleMaps","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","markers","locationMarker","makeMarkers","bind","assertThisInitialized","setLocation","showMap","presentLocations","prevWindow","state","gMapsFailure","newProps","undefined","map","location","markerLocations","markLocations","selectedIndex","showInfoWindow","idx","maps","event","trigger","newLocation","setState","LatLng","lat","lng","panTo","setMap","Marker","animation","Animation","DROP","icon","url","position","clearMarkers","addMarkers","_this2","makeMarker","_this3","marker","coordinates","label","text","fontWeight","infoWindow","content","ReactDOMServer","renderToString","src_infoWindow","addListener","close","open","_this4","forEach","arguments","length","_this5","gm_authFailure","alert","then","Map","getElementById","zoom","zoomLevel","center","fullscreenControl","catch","err","id","Component","SearchBox","onSubmit","evt","preventDefault","type","ref","placeholder","place","geometry","syncLocation","autocomplete","places","Autocomplete","handlePlaceSelect","getPlace","setUpAutoComplete","getPlacesInfo","limit","thumbnailSize","targetUrl","encodeURI","getGeoSearchUrlforLocation","fetch","method","headers","Origin","res","json","SideBar","allLocations","locations","sendMarkerLocations","isLoading","reactstrap_es","animated","value","isError","key","pageid","style","cursor","marginBottom","onClick","handlePlaceClick","lon","pageId","syncMarkerLocations","buildDatafromLocations","query","filter","el","toLowerCase","includes","syncLocationIndex","target","filteredLocations","filterLocations","sidebarOpened","padding","onChange","handleSearch","getPlaces","App","getUserLocation","toggleSidebar","setPlaces","fetchPlaces","handleSidebarError","updatedLocation","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","response","values","pages","google_maps","color","search_box","sidebar","Boolean","hostname","match","ReactDOM","render","src_App_0","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.32902d94.chunk.js","sourcesContent":["export const loadGoogleMap = () => {\n    if(!window.googleMapLoader){\n      window.googleMapPromise = new Promise((resolve) => {\n        window.googleMapLoader = () => {\n          // Stop linter complaints \n          /* global google*/\n          resolve(google);\n          delete window.googleMapLoader;\n        }\n        loadMapScript();\n      });\n  }\n   return window.googleMapPromise;\n  }\n\n  let loadMapScript = () => {\n    const maps_script = document.createElement(\"script\");\n    const api_key = 'AIzaSyADBTO8EPakOj1iN6OtsHTLuzBOMXarVAE';\n    maps_script.src = `https://maps.googleapis.com/maps/api/js?key=${api_key}&libraries=places&callback=googleMapLoader`;\n    maps_script.async = true;\n    maps_script.defer = true;\n    document.body.appendChild(maps_script);\n  }","import React from 'react'; \n\nfunction InfoWindow(props){\n    return ( <div className=\"text-center container-fluid\">\n                <h1>{props.title}</h1>\n                <h2><a href={props.wikiUrl}>Read more at Wikipedia</a></h2>\n    {props.thumbnail && <img className=\"img-responsive\" src={props.thumbnail.source} alt={props.title}/>  }   \n            </div>)\n} \n\nexport default InfoWindow;","import React,{ Component } from 'react';\nimport {loadGoogleMap} from './utils'\nimport InfoWindow from './infoWindow'\nimport ReactDOMServer from 'react-dom/server';\n\nclass GoogleMaps extends Component {\n    \n    constructor(props){\n      super(props);\n      this.markers = [];\n      this.locationMarker = null;\n      this.makeMarkers = this.makeMarkers.bind(this);\n      this.setLocation = this.setLocation.bind(this);\n      this.showMap = this.showMap.bind(this);\n      this.presentLocations = [];\n      this.prevWindow = null;\n      this.state = {gMapsFailure: false};\n    \n    }\n    componentWillMount(){\n        loadGoogleMap();\n      }\n    \n   \n      \n    componentWillReceiveProps(newProps){ \n      if(this.map === undefined) return;\n\n      if(newProps.location !== this.props.location) {\n          this.setLocation(newProps.location);\n      }\n      else if(newProps.markerLocations !== this.props.markerLocations){\n        this.markLocations(newProps.markerLocations);\n      }\n      else if(newProps.selectedIndex !== this.props.selectedIndex){\n        this.showInfoWindow(newProps.selectedIndex);\n      }\n    }\n\n    showInfoWindow(idx){\n       this.google.maps.event.trigger(this.markers[idx], 'click');\n       this.showMap(true);\n    }\n    setLocation(newLocation){\n      this.setState({location:newLocation});\n      let location = new this.google.maps.LatLng(newLocation.lat,newLocation.lng)\n      this.map.panTo(location);\n      if(this.locationMarker) {this.locationMarker.setMap(null)}\n      this.locationMarker = new this.google.maps.Marker({\n        map: this.map,\n        animation: this.google.maps.Animation.DROP,\n        icon: {\n          url: \"https://maps.google.com/mapfiles/ms/icons/blue-dot.png\"\n        },\n        position: location\n      });\n    }\n    \n    markLocations(markerLocations){\n      this.presentLocations = markerLocations;\n      this.clearMarkers();\n      this.markers = this.makeMarkers(markerLocations);\n      this.addMarkers();\n    }\n\n    makeMarkers(markerLocations){   \n      return markerLocations.map( (location,idx) => this.makeMarker(location,idx));\n    }\n\n    makeMarker(location,idx){\n      let marker = new this.google.maps.Marker({ \n        position: location.coordinates,\n        animation: this.google.maps.Animation.DROP,\n        map: this.map,\n        label: {\n         text: idx+1 + \"\",\n         fontWeight: \"bold\"\n        }\n      });\n\n      let infoWindow = new this.google.maps.InfoWindow({\n        content: ReactDOMServer.renderToString(<InfoWindow title={location.title}\n                                                           wikiUrl={location.wikiUrl} \n                                                           thumbnail={location.thumbnail}/>)\n      }); \n\n    marker.addListener('click', () => {\n      if (this.prevWindow)\n        this.prevWindow.close();\n      this.prevWindow = infoWindow;\n      infoWindow.open(this.map, marker)\n    });\n\n\n      return marker;\n  \n    }\n\n    addMarkers(){\n      this.markers.forEach(marker => marker.setMap(this.map));\n    }\n\n    clearMarkers(){\n      this.markers.forEach(marker => marker.setMap(null));\n      this.markers = [];\n    }\n\n\n     showMap(state = false){\n      this.setState({gMapsFailure: !state})\n    }\n\n    componentDidMount(){\n        window.gm_authFailure = function() {\n          alert(\"Failed to load Google Maps\")        \n        }  \n        loadGoogleMap().then((google) => {\n           this.google = google; \n           this.map = new google.maps.Map(document.getElementById('map'), {\n            zoom: this.props.zoomLevel,\n            center: this.props.location,\n            fullscreenControl: false\n          });\n        }).catch(err => this.showMap(false));\n      }\n\n\n    render(){\n          if(this.state.gMapsFailure)\n          return (<h1>Failed to load Google Maps</h1>)\n          else\n          return (<div id=\"map\"></div>)\n    }\n}\n\nexport default GoogleMaps;","import React, {Component} from 'react'; \nimport { loadGoogleMap } from './utils';\n\nclass SearchBox extends Component {\n   \n\n    render(){\n        return (\n            <form onSubmit={evt => evt.preventDefault()}>\n                <div className=\"input-group input-group-lg\" >\n                   <input type=\"text\"  id=\"search-bar\" className=\"lifted form-control\" ref=\"input\"  placeholder=\"Search for a place\"   />\n               </div>\n\n            </form>\n        );\n    }\n\n    componentWillMount(){\n        loadGoogleMap();\n    }\n\n    handlePlaceSelect(place){\n        const location = {\n            lat: place.geometry.location.lat(),\n            lng: place.geometry.location.lng(),\n        }\n        this.props.syncLocation(location);\n    }\n    setUpAutoComplete(google){\n        let autocomplete = new google.maps.places.Autocomplete(document.getElementById('search-bar')); \n        autocomplete.addListener('place_changed',() => this.handlePlaceSelect(autocomplete.getPlace()));     \n    }\n    componentDidMount(){\n        loadGoogleMap().then((google) => this.setUpAutoComplete(google));\n    }\n}\n\nexport default SearchBox;","const WIKI_API_URL = \"https://en.wikipedia.org/w/api.php\";\n\n// Use Cors Anywhere to by-pass the CORS limitation on Wikipedia's Service\nconst CORS_ANYWHERE_API = \"https://cors-anywhere.herokuapp.com\"\n\nlet getGeoSearchUrlforLocation = (lat, lng, limit, thumbnailSize) => {\n  //Using a package would have been great otherwise it looks ugly like this  \n  return encodeURI(`${CORS_ANYWHERE_API}/${WIKI_API_URL}/?action=query&prop=coordinates|pageimages|pageterms&colimit=${limit}&piprop=thumbnail&pithumbsize=${thumbnailSize}&pilimit=${limit}&wbptterms=description&generator=geosearch&ggscoord=${lat}|${lng}&ggsradius=10000&ggslimit=${limit}&format=json`);\n}\n\nexport const getPlacesInfo = (location, limit = 50, thumbnailSize = 400) => {\n  let targetUrl = getGeoSearchUrlforLocation(location.lat, location.lng, limit, thumbnailSize);\n  return fetch(targetUrl, {\n    method: 'GET',\n    headers: {\n      'Origin': null\n    }\n  }).then(res => res.json());\n}\n\nexport const getWikiPediaUrl = (pageId) => { return `https://en.wikipedia.org/?curid=${pageId}` }","import React,{ Component } from 'react';\nimport {getWikiPediaUrl  } from \"./wikipedia_client\";\nimport {Progress} from 'reactstrap';\n\nclass SideBar extends Component {    \n    \n    constructor(props){\n        super(props);\n        this.allLocations = [];\n        this.state = {locations: []}\n    }\n    componentWillReceiveProps(newProps){\n       if(newProps.places.length > 0 && newProps.places !== this.props.places){\n          this.allLocations = newProps.places; \n          this.setState({locations: this.allLocations}) \n          this.sendMarkerLocations(newProps.places)  \n       }\n    }\n\n\n    \n    getPlaces(){\n        \n        if(this.props.isLoading) return(<Progress animated  value=\"100\" />);\n        if(this.props.isError) return(<h2>There was some error</h2>)\n        else if(!this.props.isLoading && this.state.locations && this.state.locations.length < 0)\n            return <h4> No data available </h4>\n        else\n        return this.state.locations.map( (place,idx) => {\n            return (\n                <li key={place.pageid} style={{cursor: 'pointer', marginBottom: '20px' }} onClick={evt => this.handlePlaceClick(idx)}>\n                   <h4>{place.title}</h4> \n                </li>\n            )\n        })\n    \n    }\n\n    buildDatafromLocations(places){\n        return places.map(place => {return {coordinates:{ lat: place.coordinates[0].lat,lng: place.coordinates[0].lon},\n                                             title: place.title, \n                                             wikiUrl: getWikiPediaUrl(place.pageid),\n                                             thumbnail: place.thumbnail}})\n    }\n\n    sendMarkerLocations(places){\n        this.props.syncMarkerLocations(this.buildDatafromLocations(places))\n    }\n\n\n    filterLocations(query){\n       return this.allLocations.filter(el => el.title.toLowerCase().includes(query.toLowerCase()))\n    }\n\n    handlePlaceClick(idx){\n        this.props.syncLocationIndex(idx)\n    }\n    handleSearch(event){\n       if(event.target.value && event.target.value !== \"\"){\n           let filteredLocations = this.filterLocations(event.target.value); \n           this.setState({locations: filteredLocations})\n           this.sendMarkerLocations(filteredLocations)\n       }\n       else{\n           this.setState({locations: this.allLocations})\n           this.sendMarkerLocations(this.allLocations);\n       }\n    }\n    render(){\n        return (\n            <div className={this.props.sidebarOpened ? \"sidenav open\" : \"sidenav\"}>\n                <div style={{padding: '10px'}} className=\"text-center\">\n                    <div className=\"input-group input-group-lg\" style={{marginBottom: '22px'}}>\n                      <input type=\"text\" className=\"lifted form-control\" onChange={evt => this.handleSearch(evt)} placeholder=\"Type to filter\"  />\n                   </div>\n                              \n                <ol>\n                    {this.getPlaces()}\n                </ol>\n               </div> \n            </div>\n\n        )\n    }\n}\n\nexport default SideBar;","import React, { Component } from 'react';\nimport './App.css';\nimport GoogleMaps from './google_maps';\nimport SearchBox from './search_box';\nimport SideBar from './sidebar';\nimport {getPlacesInfo} from './wikipedia_client';\nimport { Button } from 'reactstrap';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.syncLocation = this.syncLocation.bind(this);\n    this.getUserLocation = this.getUserLocation.bind(this);\n    this.toggleSidebar = this.toggleSidebar.bind(this);\n    this.setPlaces = this.setPlaces.bind(this);\n    this.fetchPlaces = this.fetchPlaces.bind(this);\n    this.syncMarkerLocations = this.syncMarkerLocations.bind(this);\n    this.syncLocationIndex = this.syncLocationIndex.bind(this);\n    this.handleSidebarError = this.handleSidebarError.bind(this);\n    /* Default Google Location */; \n    this.state = {location: {lat: 28.5274229, lng: 77.1389453}, zoomLevel: 12, sidebarOpened:false, markerLocations: [], places: [], isError: false,isLoading: true, selectedIndex: undefined}\n  }\n\n  syncLocation(updatedLocation){\n    this.setState({location: updatedLocation});\n    this.fetchPlaces(updatedLocation);\n  }\n\n  syncMarkerLocations(markerLocations){\n    this.setState({markerLocations: markerLocations});\n  }\n\n \n  handleSidebarError(){\n    this.setState({isLoading: false, isError: true})\n  }\n  getUserLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(location => this.syncLocation({\n        lat: location.coords.latitude,\n        lng: location.coords.longitude\n      }));\n    }\n  }\n\n  fetchPlaces(location){\n    this.setState({places: []})\n    if(!this.state.isLoading) this.setState({isLoading: true})\n    getPlacesInfo(location).then(this.setPlaces).catch(this.handleSidebarError);    \n  }\n\n  setPlaces(response){\n    this.setState({isLoading: false});\n    if(response.query)\n      this.setState({places: Object.values(response.query.pages)});\n  }\n\n  syncLocationIndex(idx){\n    this.setState({selectedIndex: idx})\n  }\n  toggleSidebar(){\n    this.setState({sidebarOpened: !this.state.sidebarOpened})\n  }\n  componentDidMount(){\n    this.getUserLocation();\n    this.fetchPlaces(this.state.location);\n  }\n  \n  render() {\n    return (\n      <div>\n      <div id=\"app-container\" className={this.state.sidebarOpened ? \"pushed\" : \"\" }>\n          <GoogleMaps location={this.state.location} \n                      zoomLevel={this.state.zoomLevel}\n                      markerLocations={this.state.markerLocations}\n                      selectedIndex={this.state.selectedIndex} />\n\n          <div id=\"over-map\"> \n             <Button color=\"info\" id=\"toggle-sidebar\" onClick={this.toggleSidebar}> <i className=\"fa fa-2x fa-bars\"> </i> </Button> \n             <SearchBox syncLocation={this.syncLocation} />\n          </div>  \n      </div>\n      <SideBar sidebarOpened={this.state.sidebarOpened} \n              toggleSidebar={this.toggleSidebar} \n              location={this.state.location} \n              isLoading={this.state.isLoading} \n              places={this.state.places}\n              isError={this.state.isError}\n              syncMarkerLocations={this.syncMarkerLocations}\n              syncLocationIndex={this.syncLocationIndex}\n              />\n\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}