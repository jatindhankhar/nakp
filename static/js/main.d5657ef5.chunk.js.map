{"version":3,"sources":["utils.js","infoWindow.js","google_maps.js","search_box.js","wikipedia_client.js","sidebar.js","App.js","serviceWorker.js","index.js"],"names":["loadGoogleMap","window","googleMapLoader","googleMapPromise","Promise","resolve","google","loadMapScript","maps_script","document","createElement","src","concat","async","defer","body","appendChild","InfoWindow","props","react_default","a","className","title","href","wikiUrl","thumbnail","source","alt","GoogleMaps","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","markers","locationMarker","makeMarkers","bind","assertThisInitialized","setLocation","presentLocations","prevWindow","newProps","undefined","map","location","markerLocations","markLocations","selectedIndex","showInfoWindow","idx","maps","event","trigger","newLocation","setState","LatLng","lat","lng","panTo","setMap","Marker","animation","Animation","DROP","icon","url","position","clearMarkers","addMarkers","_this2","makeMarker","_this3","marker","coordinates","label","text","fontWeight","infoWindow","content","ReactDOMServer","renderToString","src_infoWindow","addListener","close","open","_this4","forEach","_this5","then","Map","getElementById","zoom","zoomLevel","center","fullscreenControl","id","Component","SearchBox","onSubmit","evt","preventDefault","type","ref","placeholder","place","geometry","syncLocation","autocomplete","places","Autocomplete","handlePlaceSelect","getPlace","setUpAutoComplete","getPlacesInfo","limit","arguments","length","thumbnailSize","targetUrl","encodeURI","getGeoSearchUrlforLocation","fetch","method","headers","Origin","res","json","SideBar","allLocations","state","locations","sendMarkerLocations","isLoading","reactstrap_es","animated","value","key","pageid","style","cursor","marginBottom","onClick","handlePlaceClick","lon","pageId","syncMarkerLocations","buildDatafromLocations","query","filter","el","toLowerCase","includes","syncLocationIndex","target","filteredLocations","filterLocations","sidebarOpened","padding","onChange","handleSearch","getPlaces","App","getUserLocation","toggleSidebar","setPlaces","fetchPlaces","updatedLocation","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","response","values","pages","google_maps","color","search_box","sidebar","Boolean","hostname","match","ReactDOM","render","src_App_0","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d5657ef5.chunk.js","sourcesContent":["export const loadGoogleMap = () => {\n    if(!window.googleMapLoader){\n      window.googleMapPromise = new Promise((resolve) => {\n        window.googleMapLoader = () => {\n          // Stop linter complaints \n          /* global google*/\n          resolve(google);\n          delete window.googleMapLoader;\n        }\n        loadMapScript();\n      });\n  }\n   return window.googleMapPromise;\n  }\n\n  let loadMapScript = () => {\n    const maps_script = document.createElement(\"script\");\n    const api_key = 'AIzaSyADBTO8EPakOj1iN6OtsHTLuzBOMXarVAE';\n    maps_script.src = `https://maps.googleapis.com/maps/api/js?key=${api_key}&libraries=places&callback=googleMapLoader`;\n    maps_script.async = true;\n    maps_script.defer = true;\n    document.body.appendChild(maps_script);\n  }","import React from 'react'; \n\nfunction InfoWindow(props){\n    return ( <div className=\"text-center container-fluid\">\n                <h1>{props.title}</h1>\n                <h2><a href={props.wikiUrl}>Read more at Wikipedia</a></h2>\n    {props.thumbnail && <img className=\"img-responsive\" src={props.thumbnail.source} alt={props.title}/>  }   \n            </div>)\n} \n\nexport default InfoWindow;","import React,{ Component } from 'react';\nimport {loadGoogleMap} from './utils'\nimport InfoWindow from './infoWindow'\nimport ReactDOMServer from 'react-dom/server';\n\nclass GoogleMaps extends Component {\n    \n    constructor(props){\n      super(props);\n      this.markers = [];\n      this.locationMarker = null;\n      this.makeMarkers = this.makeMarkers.bind(this);\n      this.setLocation = this.setLocation.bind(this);\n      this.presentLocations = [];\n      this.prevWindow = null;\n    }\n    componentWillMount(){\n        loadGoogleMap();\n      }\n    \n   \n      \n    componentWillReceiveProps(newProps){ \n      if(this.map === undefined) return;\n\n      if(newProps.location !== this.props.location) {\n          this.setLocation(newProps.location);\n      }\n      else if(newProps.markerLocations !== this.props.markerLocations){\n        this.markLocations(newProps.markerLocations);\n      }\n      else if(newProps.selectedIndex !== this.props.selectedIndex){\n        this.showInfoWindow(newProps.selectedIndex);\n      }\n    }\n\n    showInfoWindow(idx){\n       this.google.maps.event.trigger(this.markers[idx], 'click');\n    }\n    setLocation(newLocation){\n      this.setState({location:newLocation});\n      let location = new this.google.maps.LatLng(newLocation.lat,newLocation.lng)\n      this.map.panTo(location);\n      if(this.locationMarker) {this.locationMarker.setMap(null)}\n      this.locationMarker = new this.google.maps.Marker({\n        map: this.map,\n        animation: this.google.maps.Animation.DROP,\n        icon: {\n          url: \"https://maps.google.com/mapfiles/ms/icons/blue-dot.png\"\n        },\n        position: location\n      });\n    }\n    \n    markLocations(markerLocations){\n      this.presentLocations = markerLocations;\n      this.clearMarkers();\n      this.markers = this.makeMarkers(markerLocations);\n      this.addMarkers();\n    }\n\n    makeMarkers(markerLocations){   \n      return markerLocations.map( (location,idx) => this.makeMarker(location,idx));\n    }\n\n    makeMarker(location,idx){\n      let marker = new this.google.maps.Marker({ \n        position: location.coordinates,\n        animation: this.google.maps.Animation.DROP,\n        map: this.map,\n        label: {\n         text: idx+1 + \"\",\n         fontWeight: \"bold\"\n        }\n      });\n\n      let infoWindow = new this.google.maps.InfoWindow({\n        content: ReactDOMServer.renderToString(<InfoWindow title={location.title}\n                                                           wikiUrl={location.wikiUrl} \n                                                           thumbnail={location.thumbnail}/>)\n      }); \n\n    marker.addListener('click', () => {\n      if (this.prevWindow)\n        this.prevWindow.close();\n      this.prevWindow = infoWindow;\n      infoWindow.open(this.map, marker)\n    });\n\n\n      return marker;\n  \n    }\n\n    addMarkers(){\n      this.markers.forEach(marker => marker.setMap(this.map));\n    }\n\n    clearMarkers(){\n      this.markers.forEach(marker => marker.setMap(null));\n      this.markers = [];\n    }\n\n    componentDidMount(){\n        loadGoogleMap().then((google) => {\n           this.google = google; \n           this.map = new google.maps.Map(document.getElementById('map'), {\n            zoom: this.props.zoomLevel,\n            center: this.props.location,\n            fullscreenControl: false\n          });\n        });\n      }\n\n\n    render(){\n        return (<div id=\"map\"></div>)\n    }\n}\n\nexport default GoogleMaps;","import React, {Component} from 'react'; \nimport { loadGoogleMap } from './utils';\n\nclass SearchBox extends Component {\n   \n\n    render(){\n        return (\n            <form onSubmit={evt => evt.preventDefault()}>\n                <div className=\"input-group input-group-lg\" >\n                   <input type=\"text\"  id=\"search-bar\" className=\"lifted form-control\" ref=\"input\"  placeholder=\"Search for a place\"   />\n               </div>\n\n            </form>\n        );\n    }\n\n    componentWillMount(){\n        loadGoogleMap();\n    }\n\n    handlePlaceSelect(place){\n        const location = {\n            lat: place.geometry.location.lat(),\n            lng: place.geometry.location.lng(),\n        }\n        this.props.syncLocation(location);\n    }\n    setUpAutoComplete(google){\n        let autocomplete = new google.maps.places.Autocomplete(document.getElementById('search-bar')); \n        autocomplete.addListener('place_changed',() => this.handlePlaceSelect(autocomplete.getPlace()));     \n    }\n    componentDidMount(){\n        loadGoogleMap().then((google) => this.setUpAutoComplete(google));\n    }\n}\n\nexport default SearchBox;","const WIKI_API_URL = \"https://en.wikipedia.org/w/api.php\";\n\n// Use Cors Anywhere to by-pass the CORS limitation on Wikipedia's Service\nconst CORS_ANYWHERE_API = \"https://cors-anywhere.herokuapp.com\"\n\nlet getGeoSearchUrlforLocation = (lat, lng, limit, thumbnailSize) => {\n  //Using a package would have been great otherwise it looks ugly like this  \n  return encodeURI(`${CORS_ANYWHERE_API}/${WIKI_API_URL}/?action=query&prop=coordinates|pageimages|pageterms&colimit=${limit}&piprop=thumbnail&pithumbsize=${thumbnailSize}&pilimit=${limit}&wbptterms=description&generator=geosearch&ggscoord=${lat}|${lng}&ggsradius=10000&ggslimit=${limit}&format=json`);\n}\n\nexport const getPlacesInfo = (location, limit = 50, thumbnailSize = 400) => {\n  let targetUrl = getGeoSearchUrlforLocation(location.lat, location.lng, limit, thumbnailSize);\n  return fetch(targetUrl, {\n    method: 'GET',\n    headers: {\n      'Origin': null\n    }\n  }).then(res => res.json());\n}\n\nexport const getWikiPediaUrl = (pageId) => { return `https://en.wikipedia.org/?curid=${pageId}` }","import React,{ Component } from 'react';\nimport {getWikiPediaUrl  } from \"./wikipedia_client\";\nimport {Progress} from 'reactstrap';\n\nclass SideBar extends Component {    \n    \n    constructor(props){\n        super(props);\n        this.allLocations = [];\n        this.state = {locations: []}\n    }\n    componentWillReceiveProps(newProps){\n       if(newProps.places.length > 0 && newProps.places !== this.props.places){\n          this.allLocations = newProps.places; \n          this.setState({locations: this.allLocations}) \n          this.sendMarkerLocations(newProps.places)  \n       }\n    }\n\n\n    \n    getPlaces(){\n        \n        if(this.props.isLoading) return(<Progress animated  value=\"100\" />);\n        else if(!this.props.isLoading && this.state.locations && this.state.locations.length < 0)\n            return <h4> No data available </h4>\n        else\n        return this.state.locations.map( (place,idx) => {\n            return (\n                <li key={place.pageid} style={{cursor: 'pointer', marginBottom: '20px' }} onClick={evt => this.handlePlaceClick(idx)}>\n                   <h4>{place.title}</h4> \n                </li>\n            )\n        })\n    \n    }\n\n    buildDatafromLocations(places){\n        return places.map(place => {return {coordinates:{ lat: place.coordinates[0].lat,lng: place.coordinates[0].lon},\n                                             title: place.title, \n                                             wikiUrl: getWikiPediaUrl(place.pageid),\n                                             thumbnail: place.thumbnail}})\n    }\n\n    sendMarkerLocations(places){\n        this.props.syncMarkerLocations(this.buildDatafromLocations(places))\n    }\n\n\n    filterLocations(query){\n       return this.allLocations.filter(el => el.title.toLowerCase().includes(query.toLowerCase()))\n    }\n\n    handlePlaceClick(idx){\n        this.props.syncLocationIndex(idx)\n    }\n    handleSearch(event){\n       if(event.target.value && event.target.value !== \"\"){\n           let filteredLocations = this.filterLocations(event.target.value); \n           this.setState({locations: filteredLocations})\n           this.sendMarkerLocations(filteredLocations)\n       }\n       else{\n           this.setState({locations: this.allLocations})\n           this.sendMarkerLocations(this.allLocations);\n       }\n    }\n    render(){\n        return (\n            <div className={this.props.sidebarOpened ? \"sidenav open\" : \"sidenav\"}>\n                <div style={{padding: '10px'}} className=\"text-center\">\n                    <div className=\"input-group input-group-lg\" style={{marginBottom: '22px'}}>\n                      <input type=\"text\" className=\"lifted form-control\" onChange={evt => this.handleSearch(evt)} placeholder=\"Type to filter\"  />\n                   </div>\n                              \n                <ol>\n                    {this.getPlaces()}\n                </ol>\n               </div> \n            </div>\n\n        )\n    }\n}\n\nexport default SideBar;","import React, { Component } from 'react';\nimport './App.css';\nimport GoogleMaps from './google_maps';\nimport SearchBox from './search_box';\nimport SideBar from './sidebar';\nimport {getPlacesInfo} from './wikipedia_client';\nimport { Button } from 'reactstrap';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.syncLocation = this.syncLocation.bind(this);\n    this.getUserLocation = this.getUserLocation.bind(this);\n    this.toggleSidebar = this.toggleSidebar.bind(this);\n    this.setPlaces = this.setPlaces.bind(this);\n    this.fetchPlaces = this.fetchPlaces.bind(this);\n    this.syncMarkerLocations = this.syncMarkerLocations.bind(this);\n    this.syncLocationIndex = this.syncLocationIndex.bind(this);\n    /* Default Google Location */; \n    this.state = {location: {lat: 28.5274229, lng: 77.1389453}, zoomLevel: 12, sidebarOpened:false, markerLocations: [], places: [], isLoading: true, selectedIndex: undefined}\n  }\n\n  syncLocation(updatedLocation){\n    this.setState({location: updatedLocation});\n    this.fetchPlaces(updatedLocation);\n  }\n\n  syncMarkerLocations(markerLocations){\n    this.setState({markerLocations: markerLocations});\n  }\n\n \n\n  getUserLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(location => this.syncLocation({\n        lat: location.coords.latitude,\n        lng: location.coords.longitude\n      }));\n    }\n  }\n\n  fetchPlaces(location){\n    this.setState({places: []})\n    if(!this.state.isLoading) this.setState({isLoading: true})\n    getPlacesInfo(location).then(this.setPlaces);    \n  }\n\n  setPlaces(response){\n    this.setState({isLoading: false});\n    if(response.query)\n      this.setState({places: Object.values(response.query.pages)});\n  }\n\n  syncLocationIndex(idx){\n    this.setState({selectedIndex: idx})\n  }\n  toggleSidebar(){\n    this.setState({sidebarOpened: !this.state.sidebarOpened})\n  }\n  componentDidMount(){\n    this.getUserLocation();\n    this.fetchPlaces(this.state.location);\n  }\n  \n  render() {\n    return (\n      <div>\n      <div id=\"app-container\" className={this.state.sidebarOpened ? \"pushed\" : \"\" }>\n          <GoogleMaps location={this.state.location} \n                      zoomLevel={this.state.zoomLevel}\n                      markerLocations={this.state.markerLocations}\n                      selectedIndex={this.state.selectedIndex} />\n\n          <div id=\"over-map\"> \n             <Button color=\"info\" id=\"toggle-sidebar\" onClick={this.toggleSidebar}> <i className=\"fa fa-2x fa-bars\"> </i> </Button> \n             <SearchBox syncLocation={this.syncLocation} />\n          </div>  \n      </div>\n      <SideBar sidebarOpened={this.state.sidebarOpened} \n              toggleSidebar={this.toggleSidebar} \n              location={this.state.location} \n              isLoading={this.state.isLoading} \n              places={this.state.places}\n              syncMarkerLocations={this.syncMarkerLocations}\n              syncLocationIndex={this.syncLocationIndex}\n              />\n\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}